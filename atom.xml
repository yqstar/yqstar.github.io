<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AndrewYq</title>
  
  
  <link href="https://yqstar.github.io/atom.xml" rel="self"/>
  
  <link href="https://yqstar.github.io/"/>
  <updated>2022-05-06T11:11:14.134Z</updated>
  <id>https://yqstar.github.io/</id>
  
  <author>
    <name>AndrewYq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pytorch系列自学教程(1):数据加载之Dataset和DataLoader使用</title>
    <link href="https://yqstar.github.io/2022/05/05/Pytorch%E7%B3%BB%E5%88%97%E8%87%AA%E5%AD%A6%E6%95%99%E7%A8%8B-1-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%B9%8BDataset%E5%92%8CDataLoader%E4%BD%BF%E7%94%A8/"/>
    <id>https://yqstar.github.io/2022/05/05/Pytorch%E7%B3%BB%E5%88%97%E8%87%AA%E5%AD%A6%E6%95%99%E7%A8%8B-1-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%B9%8BDataset%E5%92%8CDataLoader%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-05T15:03:19.000Z</published>
    <updated>2022-05-06T11:11:14.134Z</updated>
    
    <content type="html"><![CDATA[<p>深度学习模型，区别于其他的机器学习模型，一方面，模型训练所需的数据量通常是非常大的，是无法一次性加载到内存中；另一方面，模型训练多采用基于梯度下降的优化方法对模型的权重和偏置进行逐步调整的，不可能一次性地在模型中进行正向传播和反向传播。通常，我们需要进行数据加载和预处理处理，将其封装成适合迭代训练的形式，具体会对整个数据进行随机打乱，然后将原始数据处理成一个一个的Batch，然后送到模型中进行训练。</p><p>深度学习模型流程中一般都是先解决数据加载问题，包括数据的<strong>输入问题</strong>和<strong>预处理问题</strong>，数据加载处理在深度学习链路中起着非常重要的基础作用。这篇文章将介绍Pytorch对自定义数据集进行封装的方法。</p><h1 id="Dataset、Batch、Iteration和Epoch的关系"><a href="#Dataset、Batch、Iteration和Epoch的关系" class="headerlink" title="Dataset、Batch、Iteration和Epoch的关系"></a>Dataset、Batch、Iteration和Epoch的关系</h1><p>在介绍如何使用Pytorch加载数据前，简单介绍下，<strong>Dataset</strong>，<strong>Batch</strong>，<strong>Iteration</strong> 和 <strong>Epoch</strong> 的区别和关系。</p><div class="table-container"><table><thead><tr><th style="text-align:center">名词</th><th style="text-align:center">解释                                             </th></tr></thead><tbody><tr><td style="text-align:center">  Dataset</td><td style="text-align:center">待训练的全量数据集                                      </td></tr><tr><td style="text-align:center">   Batch</td><td style="text-align:center">待训练全量数据集的一小部分样本对模型进行一次反向传播参数更新，这一小部分样本称为“一个Batch” </td></tr><tr><td style="text-align:center"> Iteration</td><td style="text-align:center">使用一个Batch数据对模型进行一次参数更新的过程，称之为“一次Iteration”             </td></tr><tr><td style="text-align:center">   Epoch</td><td style="text-align:center">待训练全量数据集对模型进行一次完整的参数更新，称之为“一个Epoch”               </td></tr></tbody></table></div><p>假设DatasetSize=10，BatchSize=3，那么每个Epoch会执行4个Iteration，对应四个Batch，每个BatchSize大小分别包括3，3，3和1个样本。</p><p><img src="/2022/05/05/Pytorch%E7%B3%BB%E5%88%97%E8%87%AA%E5%AD%A6%E6%95%99%E7%A8%8B-1-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%B9%8BDataset%E5%92%8CDataLoader%E4%BD%BF%E7%94%A8/dataset.jpg" alt="data"></p><h1 id="Pytoch数据处理：DataSet和DataLoader"><a href="#Pytoch数据处理：DataSet和DataLoader" class="headerlink" title="Pytoch数据处理：DataSet和DataLoader"></a>Pytoch数据处理：DataSet和DataLoader</h1><p>Pytorch提供了几个有用的工具：<strong>torch.utils.data.Dataset类</strong>和<strong>torch.utils.data.DataLoader类</strong>，用于数据读取和预处理。<br>基本流程是先把原始数据转变成torch.utils.data.Dataset类，随后把得到的torch.utils.data.Dataset类当作一个参数传递给torch.utils.data.DataLoader类，得到一个数据加载器，这个数据加载器每次可以返回一个Batch的数据供模型训练使用。</p><h2 id="torch-utils-data-Dataset类"><a href="#torch-utils-data-Dataset类" class="headerlink" title="torch.utils.data.Dataset类"></a>torch.utils.data.Dataset类</h2><p><em>torch.utils.data.Dataset</em>是代表这一数据的抽象类，你可以自己定义数据类，继承和重写这个抽象类，只需要定义<strong>init</strong>，<strong>len</strong>和<strong>getitem</strong>这三个魔法函数,其中：</p><ul><li>_<em>init_</em>()：用于初始化原始数据的路径和文件名等。</li><li>_<em>len_</em>()：用于返回数据集中的样本总个数。</li><li>_<em>getitem_</em>()：用于返回指定索引的样本所对应的输入变量与输出变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class CustomDataset(torch.utils.data.Dataset):#需要继承data.Dataset</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#         # TODO</span></span><br><span class="line"><span class="comment">#         # 1. Initialize file path or list of file names.</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     def __getitem__(self, index):</span></span><br><span class="line"><span class="comment">#         # TODO</span></span><br><span class="line"><span class="comment">#         # 1. Read one data from file (e.g. using numpy.fromfile, PIL.Image.open).</span></span><br><span class="line"><span class="comment">#         # 2. Preprocess the data (e.g. torchvision.Transform).</span></span><br><span class="line"><span class="comment">#         # 3. Return a data pair (e.g. image and label).</span></span><br><span class="line"><span class="comment">#         #这里需要注意的是，第一步：read one data，是一个data</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     def __len__(self):</span></span><br><span class="line"><span class="comment">#         # You should change 0 to the total size of your dataset.</span></span><br><span class="line"><span class="comment">#         pass</span></span><br></pre></td></tr></table></figure><p>用原始数据构造出来的<em>Dataset子类</em>可以理解成一个静态数据池，这个数据池使得我们可以用<em>索引</em>得到某个样本数据，而想要该数据池流动起来，源源不断地输出<em>Batch</em>供给给模型训练，还需要下一个工具<em>DataLoader类</em>。所以我们把创建的<em>Dataset子类</em>当参数传入即将构建的<em>DataLoader类</em>才是使用<em>Dataset子类</em>最终目的。</p><h2 id="torch-utils-data-DataLoader类"><a href="#torch-utils-data-DataLoader类" class="headerlink" title="torch.utils.data.DataLoader类"></a>torch.utils.data.DataLoader类</h2><p>DataLoader(object)可用参数：</p><ul><li>dataset(Dataset): 传入的数据集。</li><li>batch_size(int, optional): 每个batch有多少样本。</li><li>shuffle(bool, optional): 在每个epoch开始时，对数据进行打乱排序。</li><li>sampler(Sampler, optional): 自定义从数据集中取样本的策略，如果指定这个参数，那么shuffle必须为False。</li><li>batch_sampler(Sampler, optional): 与sampler类似，但是一次只返回一个batch的indices（索引），需要注意的是，一旦指定了这个参数，那么batch_size,shuffle,sampler,drop_last就不能再配置（互斥）。</li><li>num_workers (int, optional): 决定了有几个进程来处理data loading。0意味着所有的数据都会被load进主进程。（默认为0）</li><li>collate_fn (callable, optional): 将一个list的sample组成一个mini-batch的函数。</li><li>pin_memory (bool, optional)： 如果设置为True，那么data loader将会在返回它们之前，将tensors拷贝到CUDA中的固定内存中。</li><li>drop_last (bool, optional):如果设置为True：这个是对最后的未完成的batch来说的，比如batch_size设置为64，而一个epoch只有100个样本，那么训练时后面36个样本会被丢弃。 如果为False（默认），那么会继续正常执行，只是最后的batch_size会小一点。</li><li>timeout(numeric, optional):如果是正数，表明等待从worker进程中收集一个batch等待时间，若超出设定时间还没有收集到，那就不收集这个内容。这个numeric应总是大于等于0。默认为0</li><li>worker_init_fn (callable, optional): 每个worker初始化函数。 </li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="txt数据读取"><a href="#txt数据读取" class="headerlink" title="txt数据读取"></a>txt数据读取</h2><p>使用个人创建的txt文件数据，进行数据读取操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SampleTxtDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 数据文件地址</span></span><br><span class="line">        self.txt_file_path = <span class="string">&quot;./sample_easy_data.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        txt_data = np.loadtxt(self.txt_file_path, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        self._x = torch.from_numpy(txt_data[:, :<span class="number">2</span>])</span><br><span class="line">        self._y = torch.from_numpy(txt_data[:, <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> self._x[item], self._y[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        txt_data = np.loadtxt(self.txt_file_path, delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        self._<span class="built_in">len</span> = <span class="built_in">len</span>(txt_data)</span><br><span class="line">        <span class="keyword">return</span> self._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">sample_txt_dataset = SampleTxtDataset()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data Size:&quot;</span>,<span class="built_in">len</span>(sample_txt_dataset))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample:&quot;</span>,<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_txt_dataset)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample&#x27;s Type:&quot;</span>,<span class="built_in">type</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_txt_dataset))[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sample_dataloader = DataLoader(dataset=sample_txt_dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> iteration, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sample_dataloader):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Iteration: &#x27;</span>, iteration, <span class="string">&#x27;| batch x: &#x27;</span>, batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dataset的示例结果：</p><p><img src="/2022/05/05/Pytorch%E7%B3%BB%E5%88%97%E8%87%AA%E5%AD%A6%E6%95%99%E7%A8%8B-1-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%B9%8BDataset%E5%92%8CDataLoader%E4%BD%BF%E7%94%A8/dataset_tutorial.jpg" alt="dataset"></p><p>DataLoader的示例结果：</p><p><img src="/2022/05/05/Pytorch%E7%B3%BB%E5%88%97%E8%87%AA%E5%AD%A6%E6%95%99%E7%A8%8B-1-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E4%B9%8BDataset%E5%92%8CDataLoader%E4%BD%BF%E7%94%A8/dataloader_tutorial.jpg" alt="dataloader"></p><h2 id="csv文件读取"><a href="#csv文件读取" class="headerlink" title="csv文件读取"></a>csv文件读取</h2><p>使用常见离线数据csv文件进行数据加载和预处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SampleCsvDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.csv_file_path = <span class="string">&quot;./sample_boston.csv&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        raw_data = pd.read_csv(self.csv_file_path)</span><br><span class="line">        raw_data_shape = raw_data.shape</span><br><span class="line">        self._x  = torch.from_numpy(raw_data.iloc[:,:raw_data_shape[<span class="number">1</span>]-<span class="number">1</span>].values)</span><br><span class="line">        self._y  = torch.from_numpy(raw_data.iloc[:,raw_data_shape[<span class="number">1</span>]-<span class="number">1</span>].values)</span><br><span class="line">        <span class="keyword">return</span> self._x[item], self._y[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        raw_data = pd.read_csv(self.csv_file_path)</span><br><span class="line">        raw_data_shape = raw_data.shape</span><br><span class="line">        self._<span class="built_in">len</span> = raw_data_shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> self._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">sample_csv_dataset = SampleCsvDataset()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data Size:&quot;</span>,<span class="built_in">len</span>(sample_csv_dataset))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample:&quot;</span>,<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_csv_dataset)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample&#x27;s Type:&quot;</span>,<span class="built_in">type</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_csv_dataset))[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sample_dataloader = DataLoader(dataset=sample_csv_dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> iteration, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sample_dataloader):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Iteration: &#x27;</span>, iteration, <span class="string">&#x27;| batch x: &#x27;</span>, batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mysql数据读取"><a href="#mysql数据读取" class="headerlink" title="mysql数据读取"></a>mysql数据读取</h2><p>生产落地数据多为数据库，本文也针对常见Mysql数据库进行了数据加载，使用的是MYSQL8.0数据库的示例数据库sakila.payment表进行数据读取演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SampleMysqlDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化MySQL数据库连接配置参数</span></span><br><span class="line">        self.mysql_host = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">        self.mysql_port = <span class="number">3307</span></span><br><span class="line">        self.mysql_user = <span class="string">&quot;utest&quot;</span></span><br><span class="line">        self.mysql_password = <span class="string">&quot;123456xyq&quot;</span></span><br><span class="line">        self.mysql_db = <span class="string">&quot;sakila&quot;</span></span><br><span class="line">        self.mysql_table = <span class="string">&quot;payment&quot;</span></span><br><span class="line">        self.mysql_charset = <span class="string">&quot;utf8&quot;</span></span><br><span class="line">        self.mysql_sql_data = <span class="string">&quot;select payment_id, customer_id, staff_id, rental_id, amount from sakila.payment&quot;</span></span><br><span class="line">        self.mysql_sql_cnt = <span class="string">&quot;select count(*) from sakila.payment&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="comment"># 创建数据库连接</span></span><br><span class="line">        conn = pymysql.connect(host=self.mysql_host,</span><br><span class="line">                        port=self.mysql_port,</span><br><span class="line">                        user=self.mysql_user,</span><br><span class="line">                        password=self.mysql_password,</span><br><span class="line">                        db=self.mysql_db,</span><br><span class="line">                        charset=self.mysql_charset)</span><br><span class="line">        raw_dataframe = pd.read_sql(self.mysql_sql_data, conn)</span><br><span class="line">        raw_dataframe_shape = raw_dataframe.shape</span><br><span class="line">        self._x  = torch.from_numpy(raw_dataframe.iloc[:,:raw_dataframe_shape[<span class="number">1</span>]-<span class="number">1</span>].values)</span><br><span class="line">        self._y  = torch.from_numpy(raw_dataframe.iloc[:,raw_dataframe_shape[<span class="number">1</span>]-<span class="number">1</span>].values)</span><br><span class="line">        <span class="keyword">return</span> self._x[item], self._y[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建数据库连接</span></span><br><span class="line">        conn = pymysql.connect(host=self.mysql_host,</span><br><span class="line">                        port=self.mysql_port,</span><br><span class="line">                        user=self.mysql_user,</span><br><span class="line">                        password=self.mysql_password,</span><br><span class="line">                        db=self.mysql_db,</span><br><span class="line">                        charset=self.mysql_charset)</span><br><span class="line">        raw_dataframe = pd.read_sql(self.mysql_sql_data, conn)</span><br><span class="line">        raw_dataframe_shape = raw_dataframe.shape</span><br><span class="line">        self._<span class="built_in">len</span> = raw_dataframe_shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> self._<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line">sample_mysql_dataset = SampleMysqlDataset()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data Size:&quot;</span>,<span class="built_in">len</span>(sample_mysql_dataset))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample:&quot;</span>,<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_mysql_dataset)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample&#x27;s Type:&quot;</span>,<span class="built_in">type</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_mysql_dataset))[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sample_dataloader = DataLoader(dataset=sample_mysql_dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> iteration, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sample_dataloader):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Iteration: &#x27;</span>, iteration, <span class="string">&#x27;| batch x: &#x27;</span>, batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用pytorch自带数据集"><a href="#使用pytorch自带数据集" class="headerlink" title="使用pytorch自带数据集"></a>使用pytorch自带数据集</h2><p>为方便快速试验，Pytorch也集成了常见的数据集在torchaudio，torchtext和torchvision中，本代码使用torchvision读取常用的图像算法数据集MNIST，具体代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入训练集</span></span><br><span class="line">sample_mnist_dataset = datasets.MNIST(root=<span class="string">r&#x27;./data&#x27;</span>,</span><br><span class="line">                              transform=transforms.ToTensor(),</span><br><span class="line">                              train=<span class="literal">True</span>,</span><br><span class="line">                              download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data Size:&quot;</span>,<span class="built_in">len</span>(sample_mnist_dataset))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample:&quot;</span>,<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_mnist_dataset)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;First Sample&#x27;s Type:&quot;</span>,<span class="built_in">type</span>(<span class="built_in">next</span>(<span class="built_in">iter</span>(sample_mnist_dataset))[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sample_dataloader = DataLoader(dataset=sample_mnist_dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">num_epochs = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">iter</span>, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sample_dataloader):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27;| Iteration: &#x27;</span>, <span class="built_in">iter</span>, <span class="string">&#x27;| batch x: &#x27;</span>, batch_x.numpy(), <span class="string">&#x27;| batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="开放探索"><a href="#开放探索" class="headerlink" title="开放探索"></a>开放探索</h1><ul><li><p>如何将完整数据集划分成训练集、测试集和验证集呢？</p></li><li><p>生产读取大量数据无法一次加载到内存该如何操作呢？</p></li><li><p>如何使用TorchData进行数据读取和预处理？</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>More info: <a class="link" href="https://blog.csdn.net/guyuealian/article/details/88343924">pan_jinquan：Dataset, DataLoader产生自定义的训练数据<i class="fas fa-external-link-alt"></i></a></p><p>More info: <a class="link" href="https://www.jianshu.com/p/4818a1a4b5bd">夜和大帝：Dataset类的使用<i class="fas fa-external-link-alt"></i></a></p><p>More info: <a class="link" href="https://github.com/setail/pytorch_tutorial">setail：pytorch_tutorial<i class="fas fa-external-link-alt"></i></a></p><p>More info: <a class="link" href="https://blog.csdn.net/xjm850552586/article/details/109137914">Ericam_：十分钟搞懂Pytorch如何读取MNIST数据集<i class="fas fa-external-link-alt"></i></a></p><p>More info: <a class="link" href="https://zhuanlan.zhihu.com/p/105507334">Chenllliang：两文读懂PyTorch中Dataset与DataLoader（一）打造自己的数据集<i class="fas fa-external-link-alt"></i></a></p><p>More Info: <a class="link" href="https://blog.csdn.net/weixin_37913042/article/details/122129030">cici_iii：大数据量下如何使用Dataset和IterDataset构建数据集<i class="fas fa-external-link-alt"></i></a></p><p>More Info: <a class="link" href="https://blog.csdn.net/sdnuwjw/article/details/111227327">csdn-WJW: 如何划分训练集，测试集和验证集<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;深度学习模型，区别于其他的机器学习模型，一方面，模型训练所需的数据量通常是非常大的，是无法一次性加载到内存中；另一方面，模型训练多采用基于梯度下降的优化方法对模型的权重和偏置进行逐步调整的，不可能一次性地在模型中进行正向传播和反向传播。通常，我们需要进行数据加载和预处理处理</summary>
      
    
    
    
    <category term="深度学习" scheme="https://yqstar.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Pytorch" scheme="https://yqstar.github.io/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>snippets</title>
    <link href="https://yqstar.github.io/2022/05/04/snippets/"/>
    <id>https://yqstar.github.io/2022/05/04/snippets/</id>
    <published>2022-05-04T14:45:18.000Z</published>
    <updated>2022-05-05T06:30:21.874Z</updated>
    
    <content type="html"><![CDATA[<p>Sklearn的dataset转为dataframe<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sklearn_to_df</span>(<span class="params">sklearn_dataset</span>):</span><br><span class="line">    df = pd.DataFrame(sklearn_dataset.data, columns=sklearn_dataset.feature_names)</span><br><span class="line">    df[<span class="string">&#x27;TARGET&#x27;</span>] = pd.Series(sklearn_dataset.target)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">df_boston = sklearn_to_df(datasets.load_boston())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_boston.head())</span><br></pre></td></tr></table></figure></p><p>pymysql读取mysql数据转化为dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_frame_from_mysql</span>():</span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                           port=<span class="number">3307</span>,</span><br><span class="line">                           user=<span class="string">&quot;utest&quot;</span>,</span><br><span class="line">                           password=<span class="string">&quot;123456xyq&quot;</span>,</span><br><span class="line">                           db=<span class="string">&quot;sakila&quot;</span>,</span><br><span class="line">                           charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    sql = <span class="string">&quot;SELECT * FROM sakila.payment&quot;</span></span><br><span class="line">    data_frame = pd.read_sql(sql, conn)</span><br><span class="line">    <span class="keyword">return</span> data_frame</span><br><span class="line">pdata = load_data_frame_from_mysql()</span><br><span class="line"><span class="built_in">print</span>(pdata.head())</span><br></pre></td></tr></table></figure><p>Image处理代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    @Project: IntelligentManufacture</span></span><br><span class="line"><span class="string">    @File   : image_processing.py</span></span><br><span class="line"><span class="string">    @Author : panjq</span></span><br><span class="line"><span class="string">    @E-mail : pan_jinquan@163.com</span></span><br><span class="line"><span class="string">    @Date   : 2019-02-14 15:34:50</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_image</span>(<span class="params">title, image</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    调用matplotlib显示RGB图片</span></span><br><span class="line"><span class="string">    :param title: 图像标题</span></span><br><span class="line"><span class="string">    :param image: 图像的数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># plt.figure(&quot;show_image&quot;)</span></span><br><span class="line">    <span class="comment"># print(image.dtype)</span></span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.axis(<span class="string">&#x27;on&#x27;</span>)  <span class="comment"># 关掉坐标轴为 off</span></span><br><span class="line">    plt.title(title)  <span class="comment"># 图像题目</span></span><br><span class="line">    plt.show()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv_show_image</span>(<span class="params">title, image</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    调用OpenCV显示RGB图片</span></span><br><span class="line"><span class="string">    :param title: 图像标题</span></span><br><span class="line"><span class="string">    :param image: 输入RGB图像</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    channels=image.shape[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> channels==<span class="number">3</span>:</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)  <span class="comment"># 将BGR转为RGB</span></span><br><span class="line">    cv2.imshow(title,image)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image</span>(<span class="params">filename, resize_height=<span class="literal">None</span>, resize_width=<span class="literal">None</span>, normalization=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    读取图片数据,默认返回的是uint8,[0,255]</span></span><br><span class="line"><span class="string">    :param filename:</span></span><br><span class="line"><span class="string">    :param resize_height:</span></span><br><span class="line"><span class="string">    :param resize_width:</span></span><br><span class="line"><span class="string">    :param normalization:是否归一化到[0.,1.0]</span></span><br><span class="line"><span class="string">    :return: 返回的RGB图片数据</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    bgr_image = cv2.imread(filename)</span><br><span class="line">    <span class="comment"># bgr_image = cv2.imread(filename,cv2.IMREAD_IGNORE_ORIENTATION|cv2.IMREAD_COLOR)</span></span><br><span class="line">    <span class="keyword">if</span> bgr_image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Warning:不存在:&#123;&#125;&quot;</span>, filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bgr_image.shape) == <span class="number">2</span>:  <span class="comment"># 若是灰度图则转为三通道</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Warning:gray image&quot;</span>, filename)</span><br><span class="line">        bgr_image = cv2.cvtColor(bgr_image, cv2.COLOR_GRAY2BGR)</span><br><span class="line"> </span><br><span class="line">    rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)  <span class="comment"># 将BGR转为RGB</span></span><br><span class="line">    <span class="comment"># show_image(filename,rgb_image)</span></span><br><span class="line">    <span class="comment"># rgb_image=Image.open(filename)</span></span><br><span class="line">    rgb_image = resize_image(rgb_image,resize_height,resize_width)</span><br><span class="line">    rgb_image = np.asanyarray(rgb_image)</span><br><span class="line">    <span class="keyword">if</span> normalization:</span><br><span class="line">        <span class="comment"># 不能写成:rgb_image=rgb_image/255</span></span><br><span class="line">        rgb_image = rgb_image / <span class="number">255.0</span></span><br><span class="line">    <span class="comment"># show_image(&quot;src resize image&quot;,image)</span></span><br><span class="line">    <span class="keyword">return</span> rgb_image</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast_read_image_roi</span>(<span class="params">filename, orig_rect, ImreadModes=cv2.IMREAD_COLOR, normalization=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    快速读取图片的方法</span></span><br><span class="line"><span class="string">    :param filename: 图片路径</span></span><br><span class="line"><span class="string">    :param orig_rect:原始图片的感兴趣区域rect</span></span><br><span class="line"><span class="string">    :param ImreadModes: IMREAD_UNCHANGED</span></span><br><span class="line"><span class="string">                        IMREAD_GRAYSCALE</span></span><br><span class="line"><span class="string">                        IMREAD_COLOR</span></span><br><span class="line"><span class="string">                        IMREAD_ANYDEPTH</span></span><br><span class="line"><span class="string">                        IMREAD_ANYCOLOR</span></span><br><span class="line"><span class="string">                        IMREAD_LOAD_GDAL</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_GRAYSCALE_2</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_COLOR_2</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_GRAYSCALE_4</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_COLOR_4</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_GRAYSCALE_8</span></span><br><span class="line"><span class="string">                        IMREAD_REDUCED_COLOR_8</span></span><br><span class="line"><span class="string">                        IMREAD_IGNORE_ORIENTATION</span></span><br><span class="line"><span class="string">    :param normalization: 是否归一化</span></span><br><span class="line"><span class="string">    :return: 返回感兴趣区域ROI</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 当采用IMREAD_REDUCED模式时，对应rect也需要缩放</span></span><br><span class="line">    scale=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ImreadModes == cv2.IMREAD_REDUCED_COLOR_2 <span class="keyword">or</span> ImreadModes == cv2.IMREAD_REDUCED_COLOR_2:</span><br><span class="line">        scale=<span class="number">1</span>/<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> ImreadModes == cv2.IMREAD_REDUCED_GRAYSCALE_4 <span class="keyword">or</span> ImreadModes == cv2.IMREAD_REDUCED_COLOR_4:</span><br><span class="line">        scale=<span class="number">1</span>/<span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> ImreadModes == cv2.IMREAD_REDUCED_GRAYSCALE_8 <span class="keyword">or</span> ImreadModes == cv2.IMREAD_REDUCED_COLOR_8:</span><br><span class="line">        scale=<span class="number">1</span>/<span class="number">8</span></span><br><span class="line">    rect = np.array(orig_rect)*scale</span><br><span class="line">    rect = rect.astype(<span class="built_in">int</span>).tolist()</span><br><span class="line">    bgr_image = cv2.imread(filename,flags=ImreadModes)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> bgr_image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Warning:不存在:&#123;&#125;&quot;</span>, filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bgr_image.shape) == <span class="number">3</span>:  <span class="comment">#</span></span><br><span class="line">        rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)  <span class="comment"># 将BGR转为RGB</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rgb_image=bgr_image <span class="comment">#若是灰度图</span></span><br><span class="line">    rgb_image = np.asanyarray(rgb_image)</span><br><span class="line">    <span class="keyword">if</span> normalization:</span><br><span class="line">        <span class="comment"># 不能写成:rgb_image=rgb_image/255</span></span><br><span class="line">        rgb_image = rgb_image / <span class="number">255.0</span></span><br><span class="line">    roi_image=get_rect_image(rgb_image , rect)</span><br><span class="line">    <span class="comment"># show_image_rect(&quot;src resize image&quot;,rgb_image,rect)</span></span><br><span class="line">    <span class="comment"># cv_show_image(&quot;reROI&quot;,roi_image)</span></span><br><span class="line">    <span class="keyword">return</span> roi_image</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resize_image</span>(<span class="params">image,resize_height, resize_width</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param image:</span></span><br><span class="line"><span class="string">    :param resize_height:</span></span><br><span class="line"><span class="string">    :param resize_width:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    image_shape=np.shape(image)</span><br><span class="line">    height=image_shape[<span class="number">0</span>]</span><br><span class="line">    width=image_shape[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (resize_height <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">and</span> (resize_width <span class="keyword">is</span> <span class="literal">None</span>):<span class="comment">#错误写法：resize_height and resize_width is None</span></span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">if</span> resize_height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        resize_height=<span class="built_in">int</span>(height*resize_width/width)</span><br><span class="line">    <span class="keyword">elif</span> resize_width <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        resize_width=<span class="built_in">int</span>(width*resize_height/height)</span><br><span class="line">    image = cv2.resize(image, dsize=(resize_width, resize_height))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale_image</span>(<span class="params">image,scale</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param image:</span></span><br><span class="line"><span class="string">    :param scale: (scale_w,scale_h)</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    image = cv2.resize(image,dsize=<span class="literal">None</span>, fx=scale[<span class="number">0</span>],fy=scale[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_rect_image</span>(<span class="params">image,rect</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param image:</span></span><br><span class="line"><span class="string">    :param rect: [x,y,w,h]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    x, y, w, h=rect</span><br><span class="line">    cut_img = image[y:(y+ h),x:(x+w)]</span><br><span class="line">    <span class="keyword">return</span> cut_img</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale_rect</span>(<span class="params">orig_rect,orig_shape,dest_shape</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    对图像进行缩放时，对应的rectangle也要进行缩放</span></span><br><span class="line"><span class="string">    :param orig_rect: 原始图像的rect=[x,y,w,h]</span></span><br><span class="line"><span class="string">    :param orig_shape: 原始图像的维度shape=[h,w]</span></span><br><span class="line"><span class="string">    :param dest_shape: 缩放后图像的维度shape=[h,w]</span></span><br><span class="line"><span class="string">    :return: 经过缩放后的rectangle</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    new_x=<span class="built_in">int</span>(orig_rect[<span class="number">0</span>]*dest_shape[<span class="number">1</span>]/orig_shape[<span class="number">1</span>])</span><br><span class="line">    new_y=<span class="built_in">int</span>(orig_rect[<span class="number">1</span>]*dest_shape[<span class="number">0</span>]/orig_shape[<span class="number">0</span>])</span><br><span class="line">    new_w=<span class="built_in">int</span>(orig_rect[<span class="number">2</span>]*dest_shape[<span class="number">1</span>]/orig_shape[<span class="number">1</span>])</span><br><span class="line">    new_h=<span class="built_in">int</span>(orig_rect[<span class="number">3</span>]*dest_shape[<span class="number">0</span>]/orig_shape[<span class="number">0</span>])</span><br><span class="line">    dest_rect=[new_x,new_y,new_w,new_h]</span><br><span class="line">    <span class="keyword">return</span> dest_rect</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_image_rect</span>(<span class="params">win_name,image,rect</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param win_name:</span></span><br><span class="line"><span class="string">    :param image:</span></span><br><span class="line"><span class="string">    :param rect:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    x, y, w, h=rect</span><br><span class="line">    point1=(x,y)</span><br><span class="line">    point2=(x+w,y+h)</span><br><span class="line">    cv2.rectangle(image, point1, point2, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</span><br><span class="line">    cv_show_image(win_name, image)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb_to_gray</span>(<span class="params">image</span>):</span><br><span class="line">    image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_image</span>(<span class="params">image_path, rgb_image,toUINT8=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> toUINT8:</span><br><span class="line">        rgb_image = np.asanyarray(rgb_image * <span class="number">255</span>, dtype=np.uint8)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rgb_image.shape) == <span class="number">2</span>:  <span class="comment"># 若是灰度图则转为三通道</span></span><br><span class="line">        bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_GRAY2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR)</span><br><span class="line">    cv2.imwrite(image_path, bgr_image)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combime_save_image</span>(<span class="params">orig_image, dest_image, out_dir,name,prefix</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    命名标准：out_dir/name_prefix.jpg</span></span><br><span class="line"><span class="string">    :param orig_image:</span></span><br><span class="line"><span class="string">    :param dest_image:</span></span><br><span class="line"><span class="string">    :param image_path:</span></span><br><span class="line"><span class="string">    :param out_dir:</span></span><br><span class="line"><span class="string">    :param prefix:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    dest_path = os.path.join(out_dir, name + <span class="string">&quot;_&quot;</span>+prefix+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">    save_image(dest_path, dest_image)</span><br><span class="line"> </span><br><span class="line">    dest_image = np.hstack((orig_image, dest_image))</span><br><span class="line">    save_image(os.path.join(out_dir, <span class="string">&quot;&#123;&#125;_src_&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(name,prefix)), dest_image)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sklearn的dataset转为dataframe&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Snippet" scheme="https://yqstar.github.io/categories/Snippet/"/>
    
    
    <category term="Snippet" scheme="https://yqstar.github.io/tags/Snippet/"/>
    
    <category term="Python" scheme="https://yqstar.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Github Pages搭建个人博客</title>
    <link href="https://yqstar.github.io/2022/05/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yqstar.github.io/2022/05/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-05-04T02:12:54.000Z</published>
    <updated>2022-05-05T15:32:35.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>GitHub Pages 是直接从 GitHub 存储库托管的静态网站。 但它们不仅仅是静态文件的集合。 通过利用 Jekyll 和 Liquid 等网站生成技术，开发人员可定义被处理为完整静态网站的动态模板。 每次将更改提交到与网站关联的源分支时，都会使用最新更新重新生成该更改，并自动将其发布到目标 URL。</p><p>GitHub Pages 是直接从 GitHub 存储库托管的免费静态网站。 使用 YAML 和 Markdown 等标准技术，任何人都可以在几分钟内生成和维护网站。</p><h1 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h1><p>参考<br>如何使用本地插入图片<br><a class="link" href="https://github.com/xcodebuild/hexo-asset-image">https://github.com/xcodebuild/hexo-asset-image<i class="fas fa-external-link-alt"></i></a><br><a class="link" href="https://blog.csdn.net/fitnig/article/details/106522811">https://blog.csdn.net/fitnig/article/details/106522811<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;技术原理&quot;&gt;&lt;a href=&quot;#技术原理&quot; class=&quot;headerlink&quot; title=&quot;技术原理&quot;&gt;&lt;/a&gt;技术原理&lt;/h1&gt;&lt;p&gt;GitHub Pages 是直接从 GitHub 存储库托管的静态网站。 但它们不仅仅是静态文件的集合。 通过利用 Jeky</summary>
      
    
    
    
    
  </entry>
  
</feed>
