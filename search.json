[{"title":"Pytorch教程（1）:数据加载Dataset和DataLoader使用","url":"/2022/05/04/Pytorch%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89-%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/","content":"数据加载的重要性，在Pytorch中主要使用DataSet和DataLoader两类。其中DataSet是作为DataLoader实例化类的参数，首先讲解Dataset。在讲解之前简单梳理下数据。DataSize —&gt; BatchSize —&gt; Iteration —&gt; Epoch 的关系。\n训练模型一般都是先处理 数据的输入问题 和 预处理问题。Pytorch提供了几个有用的工具：torch.utils.data.Dataset类   和  torch.utils.data.DataLoader类 。\n流程是先把原始数据转变成 torch.utils.data.Dataset类随后再把得到的torch.utils.data.Dataset类当作一个参数传递给torch.utils.data.DataLoader类，得到一个数据加载器，这个数据加载器每次可以返回一个Batch的数据供模型训练使用。\nDataSetimport torchprint(&quot;hello world!&quot;)\nDataLoader参考https://blog.csdn.net/guyuealian/article/details/88343924\n","categories":["深度学习"],"tags":["Pytorch"]},{"title":"Hello World","url":"/2022/05/03/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server$ hexo server\nMore info: Server\nGenerate static files$ hexo generate\nMore info: Generating\nDeploy to remote sites$ hexo deploy\nMore info: Deployment\n"},{"title":"snippets","url":"/2022/05/04/snippets/","content":"Sklearn的dataset转为dataframeimport pandas as pdfrom sklearn import datasetsdef sklearn_to_df(sklearn_dataset):    df = pd.DataFrame(sklearn_dataset.data, columns=sklearn_dataset.feature_names)    df[&#x27;TARGET&#x27;] = pd.Series(sklearn_dataset.target)    return dfdf_boston = sklearn_to_df(datasets.load_boston())print(df_boston.head())\npymysql读取mysql数据转化为dataframe\nimport pymysqlimport pandas as pddef load_data_frame_from_mysql():    conn = pymysql.connect(host=&quot;127.0.0.1&quot;,                           port=3307,                           user=&quot;utest&quot;,                           password=&quot;123456xyq&quot;,                           db=&quot;sakila&quot;,                           charset=&quot;utf8&quot;)    sql = &quot;SELECT * FROM sakila.payment&quot;    data_frame = pd.read_sql(sql, conn)    return data_framepdata = load_data_frame_from_mysql()print(pdata.head())","categories":["Snippet"],"tags":["Snippet","Python"]},{"title":"如何使用Github Pages搭建个人博客","url":"/2022/05/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"技术原理GitHub Pages 是直接从 GitHub 存储库托管的静态网站。 但它们不仅仅是静态文件的集合。 通过利用 Jekyll 和 Liquid 等网站生成技术，开发人员可定义被处理为完整静态网站的动态模板。 每次将更改提交到与网站关联的源分支时，都会使用最新更新重新生成该更改，并自动将其发布到目标 URL。\nGitHub Pages 是直接从 GitHub 存储库托管的免费静态网站。 使用 YAML 和 Markdown 等标准技术，任何人都可以在几分钟内生成和维护网站。\n使用环境"}]